// Generated by gencpp from file simu_visual/linear_speed_path.msg
// DO NOT EDIT!


#ifndef SIMU_VISUAL_MESSAGE_LINEAR_SPEED_PATH_H
#define SIMU_VISUAL_MESSAGE_LINEAR_SPEED_PATH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace simu_visual
{
template <class ContainerAllocator>
struct linear_speed_path_
{
  typedef linear_speed_path_<ContainerAllocator> Type;

  linear_speed_path_()
    : qo(0.0)
    , qi(0.0)
    , vmax_1(0.0)
    , amax_1(0.0)
    , paso1(0)
    , paso2(0)
    , ls_run(false)
    , idcall(0)  {
    }
  linear_speed_path_(const ContainerAllocator& _alloc)
    : qo(0.0)
    , qi(0.0)
    , vmax_1(0.0)
    , amax_1(0.0)
    , paso1(0)
    , paso2(0)
    , ls_run(false)
    , idcall(0)  {
  (void)_alloc;
    }



   typedef float _qo_type;
  _qo_type qo;

   typedef float _qi_type;
  _qi_type qi;

   typedef float _vmax_1_type;
  _vmax_1_type vmax_1;

   typedef float _amax_1_type;
  _amax_1_type amax_1;

   typedef int64_t _paso1_type;
  _paso1_type paso1;

   typedef int64_t _paso2_type;
  _paso2_type paso2;

   typedef uint8_t _ls_run_type;
  _ls_run_type ls_run;

   typedef int64_t _idcall_type;
  _idcall_type idcall;





  typedef boost::shared_ptr< ::simu_visual::linear_speed_path_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::simu_visual::linear_speed_path_<ContainerAllocator> const> ConstPtr;

}; // struct linear_speed_path_

typedef ::simu_visual::linear_speed_path_<std::allocator<void> > linear_speed_path;

typedef boost::shared_ptr< ::simu_visual::linear_speed_path > linear_speed_pathPtr;
typedef boost::shared_ptr< ::simu_visual::linear_speed_path const> linear_speed_pathConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::simu_visual::linear_speed_path_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::simu_visual::linear_speed_path_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::simu_visual::linear_speed_path_<ContainerAllocator1> & lhs, const ::simu_visual::linear_speed_path_<ContainerAllocator2> & rhs)
{
  return lhs.qo == rhs.qo &&
    lhs.qi == rhs.qi &&
    lhs.vmax_1 == rhs.vmax_1 &&
    lhs.amax_1 == rhs.amax_1 &&
    lhs.paso1 == rhs.paso1 &&
    lhs.paso2 == rhs.paso2 &&
    lhs.ls_run == rhs.ls_run &&
    lhs.idcall == rhs.idcall;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::simu_visual::linear_speed_path_<ContainerAllocator1> & lhs, const ::simu_visual::linear_speed_path_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace simu_visual

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::simu_visual::linear_speed_path_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simu_visual::linear_speed_path_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simu_visual::linear_speed_path_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simu_visual::linear_speed_path_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simu_visual::linear_speed_path_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simu_visual::linear_speed_path_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::simu_visual::linear_speed_path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c2b4e4cd669bdd0695c7cea0625007b4";
  }

  static const char* value(const ::simu_visual::linear_speed_path_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc2b4e4cd669bdd06ULL;
  static const uint64_t static_value2 = 0x95c7cea0625007b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::simu_visual::linear_speed_path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "simu_visual/linear_speed_path";
  }

  static const char* value(const ::simu_visual::linear_speed_path_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::simu_visual::linear_speed_path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 qo\n"
"float32 qi\n"
"float32 vmax_1\n"
"float32 amax_1\n"
"int64 paso1\n"
"int64 paso2\n"
"bool ls_run\n"
"int64 idcall\n"
;
  }

  static const char* value(const ::simu_visual::linear_speed_path_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::simu_visual::linear_speed_path_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.qo);
      stream.next(m.qi);
      stream.next(m.vmax_1);
      stream.next(m.amax_1);
      stream.next(m.paso1);
      stream.next(m.paso2);
      stream.next(m.ls_run);
      stream.next(m.idcall);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct linear_speed_path_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::simu_visual::linear_speed_path_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::simu_visual::linear_speed_path_<ContainerAllocator>& v)
  {
    s << indent << "qo: ";
    Printer<float>::stream(s, indent + "  ", v.qo);
    s << indent << "qi: ";
    Printer<float>::stream(s, indent + "  ", v.qi);
    s << indent << "vmax_1: ";
    Printer<float>::stream(s, indent + "  ", v.vmax_1);
    s << indent << "amax_1: ";
    Printer<float>::stream(s, indent + "  ", v.amax_1);
    s << indent << "paso1: ";
    Printer<int64_t>::stream(s, indent + "  ", v.paso1);
    s << indent << "paso2: ";
    Printer<int64_t>::stream(s, indent + "  ", v.paso2);
    s << indent << "ls_run: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ls_run);
    s << indent << "idcall: ";
    Printer<int64_t>::stream(s, indent + "  ", v.idcall);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIMU_VISUAL_MESSAGE_LINEAR_SPEED_PATH_H
