// Generated by gencpp from file simu_visual/msg_tm1.msg
// DO NOT EDIT!


#ifndef SIMU_VISUAL_MESSAGE_MSG_TM1_H
#define SIMU_VISUAL_MESSAGE_MSG_TM1_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace simu_visual
{
template <class ContainerAllocator>
struct msg_tm1_
{
  typedef msg_tm1_<ContainerAllocator> Type;

  msg_tm1_()
    : graficar_realtime(false)
    , idcall(0)  {
    }
  msg_tm1_(const ContainerAllocator& _alloc)
    : graficar_realtime(false)
    , idcall(0)  {
  (void)_alloc;
    }



   typedef uint8_t _graficar_realtime_type;
  _graficar_realtime_type graficar_realtime;

   typedef int64_t _idcall_type;
  _idcall_type idcall;





  typedef boost::shared_ptr< ::simu_visual::msg_tm1_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::simu_visual::msg_tm1_<ContainerAllocator> const> ConstPtr;

}; // struct msg_tm1_

typedef ::simu_visual::msg_tm1_<std::allocator<void> > msg_tm1;

typedef boost::shared_ptr< ::simu_visual::msg_tm1 > msg_tm1Ptr;
typedef boost::shared_ptr< ::simu_visual::msg_tm1 const> msg_tm1ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::simu_visual::msg_tm1_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::simu_visual::msg_tm1_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::simu_visual::msg_tm1_<ContainerAllocator1> & lhs, const ::simu_visual::msg_tm1_<ContainerAllocator2> & rhs)
{
  return lhs.graficar_realtime == rhs.graficar_realtime &&
    lhs.idcall == rhs.idcall;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::simu_visual::msg_tm1_<ContainerAllocator1> & lhs, const ::simu_visual::msg_tm1_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace simu_visual

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::simu_visual::msg_tm1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simu_visual::msg_tm1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simu_visual::msg_tm1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simu_visual::msg_tm1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simu_visual::msg_tm1_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simu_visual::msg_tm1_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::simu_visual::msg_tm1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3ecf0f7d8bacd9f1e9e670a95987c060";
  }

  static const char* value(const ::simu_visual::msg_tm1_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3ecf0f7d8bacd9f1ULL;
  static const uint64_t static_value2 = 0xe9e670a95987c060ULL;
};

template<class ContainerAllocator>
struct DataType< ::simu_visual::msg_tm1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "simu_visual/msg_tm1";
  }

  static const char* value(const ::simu_visual::msg_tm1_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::simu_visual::msg_tm1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool graficar_realtime\n"
"int64 idcall\n"
;
  }

  static const char* value(const ::simu_visual::msg_tm1_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::simu_visual::msg_tm1_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.graficar_realtime);
      stream.next(m.idcall);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct msg_tm1_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::simu_visual::msg_tm1_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::simu_visual::msg_tm1_<ContainerAllocator>& v)
  {
    s << indent << "graficar_realtime: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.graficar_realtime);
    s << indent << "idcall: ";
    Printer<int64_t>::stream(s, indent + "  ", v.idcall);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIMU_VISUAL_MESSAGE_MSG_TM1_H
