// Generated by gencpp from file simu_visual/parameter_ws.msg
// DO NOT EDIT!


#ifndef SIMU_VISUAL_MESSAGE_PARAMETER_WS_H
#define SIMU_VISUAL_MESSAGE_PARAMETER_WS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace simu_visual
{
template <class ContainerAllocator>
struct parameter_ws_
{
  typedef parameter_ws_<ContainerAllocator> Type;

  parameter_ws_()
    : graficar_realtime(false)
    , step(0)
    , idcall(0)  {
    }
  parameter_ws_(const ContainerAllocator& _alloc)
    : graficar_realtime(false)
    , step(0)
    , idcall(0)  {
  (void)_alloc;
    }



   typedef uint8_t _graficar_realtime_type;
  _graficar_realtime_type graficar_realtime;

   typedef int64_t _step_type;
  _step_type step;

   typedef int64_t _idcall_type;
  _idcall_type idcall;





  typedef boost::shared_ptr< ::simu_visual::parameter_ws_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::simu_visual::parameter_ws_<ContainerAllocator> const> ConstPtr;

}; // struct parameter_ws_

typedef ::simu_visual::parameter_ws_<std::allocator<void> > parameter_ws;

typedef boost::shared_ptr< ::simu_visual::parameter_ws > parameter_wsPtr;
typedef boost::shared_ptr< ::simu_visual::parameter_ws const> parameter_wsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::simu_visual::parameter_ws_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::simu_visual::parameter_ws_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::simu_visual::parameter_ws_<ContainerAllocator1> & lhs, const ::simu_visual::parameter_ws_<ContainerAllocator2> & rhs)
{
  return lhs.graficar_realtime == rhs.graficar_realtime &&
    lhs.step == rhs.step &&
    lhs.idcall == rhs.idcall;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::simu_visual::parameter_ws_<ContainerAllocator1> & lhs, const ::simu_visual::parameter_ws_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace simu_visual

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::simu_visual::parameter_ws_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::simu_visual::parameter_ws_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simu_visual::parameter_ws_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::simu_visual::parameter_ws_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simu_visual::parameter_ws_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::simu_visual::parameter_ws_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::simu_visual::parameter_ws_<ContainerAllocator> >
{
  static const char* value()
  {
    return "13fef40ddffb08d40623ab9ab34babdd";
  }

  static const char* value(const ::simu_visual::parameter_ws_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x13fef40ddffb08d4ULL;
  static const uint64_t static_value2 = 0x0623ab9ab34babddULL;
};

template<class ContainerAllocator>
struct DataType< ::simu_visual::parameter_ws_<ContainerAllocator> >
{
  static const char* value()
  {
    return "simu_visual/parameter_ws";
  }

  static const char* value(const ::simu_visual::parameter_ws_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::simu_visual::parameter_ws_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool graficar_realtime\n"
"int64 step\n"
"int64 idcall\n"
;
  }

  static const char* value(const ::simu_visual::parameter_ws_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::simu_visual::parameter_ws_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.graficar_realtime);
      stream.next(m.step);
      stream.next(m.idcall);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct parameter_ws_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::simu_visual::parameter_ws_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::simu_visual::parameter_ws_<ContainerAllocator>& v)
  {
    s << indent << "graficar_realtime: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.graficar_realtime);
    s << indent << "step: ";
    Printer<int64_t>::stream(s, indent + "  ", v.step);
    s << indent << "idcall: ";
    Printer<int64_t>::stream(s, indent + "  ", v.idcall);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIMU_VISUAL_MESSAGE_PARAMETER_WS_H
