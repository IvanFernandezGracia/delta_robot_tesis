# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from simu_visual/input_path_l_xyz.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class input_path_l_xyz(genpy.Message):
  _md5sum = "2d2c1d1e38cec0b4387b2da564ea4c71"
  _type = "simu_visual/input_path_l_xyz"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 x0
float32 y0
float32 z0
float32 xf
float32 yf
float32 zf
bool graficar_realtime
int64 idcall
"""
  __slots__ = ['x0','y0','z0','xf','yf','zf','graficar_realtime','idcall']
  _slot_types = ['float32','float32','float32','float32','float32','float32','bool','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x0,y0,z0,xf,yf,zf,graficar_realtime,idcall

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(input_path_l_xyz, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.x0 is None:
        self.x0 = 0.
      if self.y0 is None:
        self.y0 = 0.
      if self.z0 is None:
        self.z0 = 0.
      if self.xf is None:
        self.xf = 0.
      if self.yf is None:
        self.yf = 0.
      if self.zf is None:
        self.zf = 0.
      if self.graficar_realtime is None:
        self.graficar_realtime = False
      if self.idcall is None:
        self.idcall = 0
    else:
      self.x0 = 0.
      self.y0 = 0.
      self.z0 = 0.
      self.xf = 0.
      self.yf = 0.
      self.zf = 0.
      self.graficar_realtime = False
      self.idcall = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6fBq().pack(_x.x0, _x.y0, _x.z0, _x.xf, _x.yf, _x.zf, _x.graficar_realtime, _x.idcall))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 33
      (_x.x0, _x.y0, _x.z0, _x.xf, _x.yf, _x.zf, _x.graficar_realtime, _x.idcall,) = _get_struct_6fBq().unpack(str[start:end])
      self.graficar_realtime = bool(self.graficar_realtime)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6fBq().pack(_x.x0, _x.y0, _x.z0, _x.xf, _x.yf, _x.zf, _x.graficar_realtime, _x.idcall))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 33
      (_x.x0, _x.y0, _x.z0, _x.xf, _x.yf, _x.zf, _x.graficar_realtime, _x.idcall,) = _get_struct_6fBq().unpack(str[start:end])
      self.graficar_realtime = bool(self.graficar_realtime)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6fBq = None
def _get_struct_6fBq():
    global _struct_6fBq
    if _struct_6fBq is None:
        _struct_6fBq = struct.Struct("<6fBq")
    return _struct_6fBq
